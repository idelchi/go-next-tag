// go-next-tag is a simple command-line application for managing version tagging in a git repository.
// Allows for the automatic calculation of the next tag based on the current repository state and the bump strategy.
package main

import (
	"fmt"
	"log"
	"log/slog"
	"os"
	"strings"
)

// Global variable for CI stamping.
var version = "unknown - unofficial & generated by unknown"

func main() { //nolint: funlen,cyclop
	cfg, err := parseFlags()
	if err != nil {
		slog.Error("Parsing flags", "error", err)

		os.Exit(1)
	}

	if err := cfg.Validate(); err != nil {
		slog.Error("Validating configuration", "error", err)

		os.Exit(1)
	}

	// Initialize a new GitManager with the provided flags.
	gitManager, err := NewGitManager(cfg.Token)
	if err != nil {
		log.Fatalf("error initializing GitManager: %s", err)
	}

	// Configure git with the provided settings.
	if err := gitManager.ConfigureGit(cfg.User.Name, cfg.User.Email); err != nil {
		log.Fatalf("error configuring Git: %s", err)
	}

	if cfg.Action.Checkout != "" {
		// Clone the repository if the clone flag is set.
		branch := strings.Split(cfg.Action.Checkout, " ")[0]
		commit := strings.Split(cfg.Action.Checkout, " ")[1]

		if err := gitManager.Checkout(branch, commit); err != nil {
			log.Fatalf("error checking out branch %q: %s", branch, err)
		}
	}

	// Calculate the next tag based on the current repository state and the bump strategy.
	tag, err := gitManager.CalculateNextTag(cfg.Action.Bump)
	if err != nil {
		log.Fatalf("error calculating next tag: %s", err)
	}

	var tagString string

	switch cfg.Action.Format {
	case "semver":
		tagString = fmt.Sprintf("%s%s", cfg.Action.Prefix, tag.String())
	case "majorminor":
		tagString = fmt.Sprintf("%s%d.%d", cfg.Action.Prefix, tag.Major(), tag.Minor())
	}

	slog.Info("Next tag", "tag", tagString)

	// Create the calculated tag.
	if err := gitManager.CreateTag(tagString); err != nil {
		log.Fatalf("error creating tag: %s", err)
	}

	// If the push flag is not set, exit.
	if !cfg.Action.Push {
		os.Exit(0)
	}

	// Push the tag to the remote repository.
	if err := gitManager.PushTag(tagString); err != nil {
		log.Fatalf("error pushing tag: %s", err)
	}

	log.Printf("Tag %q pushed successfully.\n", tagString)
}
